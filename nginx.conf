
user nginx; # Chạy Nginx dưới tài khoản người dùng nginx.
worker_processes auto; #Tự động cấu hình số lượng worker processes dựa trên số lượng CPU. Đối với một CPU 8 nhân 16 luồng, Nginx sẽ tạo ra 8 worker process

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048; #Định nghĩa số lượng kết nối tối đa mỗi worker process có thể xử lý. 2048 or 4069
    use epoll ; # Sử dụng epoll cho Linux để xử lý kết nối hiệu quả hơn
}

http {
    include /etc/nginx/mime.types; #Định nghĩa các loại MIME để Nginx biết cách xử lý các loại file khác nhau.
    default_type application/octet-stream;  #  Loại MIME mặc định cho các file không xác định loại.

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on; # Bật chế độ gửi file nhanh hơn.
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65; #Thời gian chờ cho các kết nối keep-alive.
    types_hash_max_size 2048;
    client_max_body_size 16M;

#   include /etc/nginx/conf.d/*.conf; # import configurations from children's servers.


   #sử dụng để định nghĩa một nhóm các máy chủ, thường là các backend servers. Nó chủ yếu được sử dụng cho mục đích cân bằng tải (load balancing)
   # và định tuyến yêu cầu.

    upstream backend {
        server app:8088;
#       server 192.168.1.1:8080 weight=3; #receive three times requests of server third
#     	server 192.168.1.2:8080 weight=1;
    }

    server {
        listen 80;
        server_name example.com; #server address defined in /etc/hosts if run locally, or public domain

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html; #Thử truy cập URI và URI thư mục, nếu không thành công trả về index.html
        }

        location /api {
            proxy_pass http://backend; #forward to localhost:8080 upstream
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


# 		error_page  404              /404.html;
#         location = /404.html {
#             root   /usr/share/nginx/html;
#             internal;
#         }
#
#         # Cấu hình xử lý lỗi 500, 502, 503, 504
#         error_page   500 502 503 504  /50x.html;
#         location = /50x.html {
#             root   /usr/share/nginx/html;
#             internal;
#         }
        # Cấu hình SSL (nếu cần)
        # listen 443 ssl;
        # ssl_certificate /path/to/your/fullchain.pem;
        # ssl_certificate_key /path/to/your/privkey.pem;
    }


#     server {
#         listen       8080;
#         server_name  anotherdomain.com www.anotherdomain.com;
#
#         location / {
#             root   /var/www/anotherdomain;
#             index  index.html index.htm;
#             try_files $uri $uri/ /index.html;
#         }
#
#         location /api/ {
#             proxy_pass http://another-backend:9090;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
#     }
}